/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;


import com.alee.laf.WebLookAndFeel;
import dao.ClientsDAO;
import entities.Clients;
import java.awt.Component;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.EventObject;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ButtonModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.event.CellEditorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import tables.Table_Clients;

/**
 *
 * @author HoussemEddine
 */
public class Frame_Admin extends javax.swing.JFrame {

    /**
     * Creates new form Frame_Admin
     */
    public void refrechTable(){
        TableClients.setModel(new Table_Clients());
                TableColumn column = TableClients.getColumnModel().getColumn(9);
        column.setCellRenderer(new ButtonsRenderer());
        column.setCellEditor(new ButtonsEditor(TableClients));
    }
    public void ModifyMedicament(){
        Clients client = new Clients();
        client.setLogin_clt(txtLogin.getText());
        client.setPwd_clt(txtPwd.getText());
        client.setId_clt(Integer.parseInt(TableClients.getValueAt(TableClients.getSelectedRow(),0).toString()));
        //Insérer le Stock
        new ClientsDAO().updateClient(client);
        //Afficher un message de confirmation
        JOptionPane.showMessageDialog(this, "Modification effectué avec succès");
        
    }
    public void hide() {
    TableColumn column = TableClients.getColumnModel().getColumn(0);
    column.setMinWidth(0);
    column.setMaxWidth(0);
    column.setWidth(0);
    column.setPreferredWidth(0);
    doLayout();
}
    public Frame_Admin() throws IOException {
         try {
            UIManager.setLookAndFeel(new WebLookAndFeel());
         //   Image bg = ImageIO.read(new File("/bg.jpg"));
       //     Image bgpan1 = ImageIO.read(new File("/bgpan.jpg"));
         //   Image bgpan2 = ImageIO.read(new File("/bgpan2.png"));
            initComponents();
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(Frame_Authentification.class.getName()).log(Level.SEVERE, null, ex);
        }
         TableClients.setRowHeight(35);
         TableColumn column = TableClients.getColumnModel().getColumn(9);
        column.setCellRenderer(new ButtonsRenderer());
        column.setCellEditor(new ButtonsEditor(TableClients));
        hide();
        this.setSize(965, 472);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Menu = new javax.swing.JTabbedPane();
        PanAcceuil = new javax.swing.JPanel();
        PanGPharmatiens = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        PanGClients = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableClients = new javax.swing.JTable();
        btnSuppSelec = new javax.swing.JButton();
        btnModifier = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        txtLogin = new javax.swing.JTextField();
        txtPwd = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        Menu.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        Menu.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N

        javax.swing.GroupLayout PanAcceuilLayout = new javax.swing.GroupLayout(PanAcceuil);
        PanAcceuil.setLayout(PanAcceuilLayout);
        PanAcceuilLayout.setHorizontalGroup(
            PanAcceuilLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 780, Short.MAX_VALUE)
        );
        PanAcceuilLayout.setVerticalGroup(
            PanAcceuilLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 335, Short.MAX_VALUE)
        );

        Menu.addTab("Acceuil", PanAcceuil);

        jTabbedPane1.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 642, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 305, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Gérer la liste des Pharmaciens", jPanel1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 642, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 305, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Gérer les demandes d'inscrit", jPanel2);

        javax.swing.GroupLayout PanGPharmatiensLayout = new javax.swing.GroupLayout(PanGPharmatiens);
        PanGPharmatiens.setLayout(PanGPharmatiensLayout);
        PanGPharmatiensLayout.setHorizontalGroup(
            PanGPharmatiensLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanGPharmatiensLayout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 647, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 133, Short.MAX_VALUE))
        );
        PanGPharmatiensLayout.setVerticalGroup(
            PanGPharmatiensLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        Menu.addTab("Gestion Pharmatiens", PanGPharmatiens);

        PanGClients.setLayout(null);

        jLabel1.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Liste des Clients :");
        PanGClients.add(jLabel1);
        jLabel1.setBounds(26, 11, 147, 23);

        TableClients.setModel(new Table_Clients());
        TableClients.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableClientsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TableClients);

        PanGClients.add(jScrollPane1);
        jScrollPane1.setBounds(0, 45, 688, 290);

        btnSuppSelec.setText("Supprimer\n La\n Selection");
        btnSuppSelec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuppSelecActionPerformed(evt);
            }
        });
        PanGClients.add(btnSuppSelec);
        btnSuppSelec.setBounds(694, 45, 74, 72);

        btnModifier.setText("Modifier");
        btnModifier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModifierActionPerformed(evt);
            }
        });
        PanGClients.add(btnModifier);
        btnModifier.setBounds(694, 128, 74, 31);

        jLabel5.setIcon(new javax.swing.ImageIcon("C:\\Users\\HoussemEddine\\Documents\\NetBeansProjects\\TuniPharmaUchiwa\\src\\bgpan2.png")); // NOI18N
        PanGClients.add(jLabel5);
        jLabel5.setBounds(0, 0, 600, 340);

        jLabel7.setIcon(new javax.swing.ImageIcon("C:\\Users\\HoussemEddine\\Documents\\NetBeansProjects\\TuniPharmaUchiwa\\src\\bgpan2.png")); // NOI18N
        PanGClients.add(jLabel7);
        jLabel7.setBounds(540, 0, 240, 340);

        Menu.addTab("Gestion Clients", PanGClients);

        getContentPane().add(Menu);
        Menu.setBounds(20, 120, 940, 340);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Modifier Client :", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Century Gothic", 0, 12))); // NOI18N
        jPanel3.setLayout(null);
        jPanel3.add(txtLogin);
        txtLogin.setBounds(133, 62, 99, 26);
        jPanel3.add(txtPwd);
        txtPwd.setBounds(133, 99, 98, 25);

        jLabel2.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jLabel2.setText("Login :");
        jPanel3.add(jLabel2);
        jLabel2.setBounds(31, 64, 44, 19);

        jLabel3.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jLabel3.setText("Mot de Passe :");
        jPanel3.add(jLabel3);
        jLabel3.setBounds(16, 100, 99, 19);

        jButton2.setText("Enregistrer");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton2);
        jButton2.setBounds(133, 143, 98, 39);

        jLabel6.setIcon(new javax.swing.ImageIcon("C:\\Users\\HoussemEddine\\Documents\\NetBeansProjects\\TuniPharmaUchiwa\\src\\bgpan.jpg")); // NOI18N
        jPanel3.add(jLabel6);
        jLabel6.setBounds(0, 0, 270, 340);

        getContentPane().add(jPanel3);
        jPanel3.setBounds(970, 120, 270, 340);

        jLabel4.setIcon(new javax.swing.ImageIcon("C:\\Users\\HoussemEddine\\Documents\\NetBeansProjects\\TuniPharmaUchiwa\\src\\bg.jpg")); // NOI18N
        getContentPane().add(jLabel4);
        jLabel4.setBounds(0, 0, 1260, 470);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSuppSelecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuppSelecActionPerformed
        for(int i=0;i<TableClients.getRowCount();i++){
            if(TableClients.getValueAt(i, 10).equals(true)){
                new ClientsDAO().deleteClient(Integer.parseInt(TableClients.getValueAt(i, 0).toString()));
            }
        }
                TableClients.setModel(new Table_Clients());
                TableColumn column = TableClients.getColumnModel().getColumn(9);
        column.setCellRenderer(new ButtonsRenderer());
        column.setCellEditor(new ButtonsEditor(TableClients));
        hide();
    }//GEN-LAST:event_btnSuppSelecActionPerformed

    private void btnModifierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModifierActionPerformed
        for(int i=0;i<=TableClients.getRowCount();i++){
        if(TableClients.isRowSelected(i)){
            
            txtLogin.setText(TableClients.getValueAt(i, 3).toString());
            txtPwd.setText(TableClients.getValueAt(i, 4).toString());
            this.setSize(1257, 472);
            
            break;
        }
        else if(!TableClients.isRowSelected(i)&&i==TableClients.getRowCount())
            JOptionPane.showMessageDialog(this, "Vous devez selectionner un Client !");
        
        
        }
        
    }//GEN-LAST:event_btnModifierActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        ModifyMedicament();
        refrechTable();
        hide();
        this.setSize(965, 472);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void TableClientsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableClientsMouseClicked
            txtLogin.setText(TableClients.getValueAt(TableClients.getSelectedRow(), 3).toString());
            txtPwd.setText(TableClients.getValueAt(TableClients.getSelectedRow(), 4).toString());
            this.setSize(965, 472);
    }//GEN-LAST:event_TableClientsMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Frame_Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Frame_Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Frame_Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Frame_Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Frame_Admin().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(Frame_Admin.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane Menu;
    private javax.swing.JPanel PanAcceuil;
    private javax.swing.JPanel PanGClients;
    private javax.swing.JPanel PanGPharmatiens;
    private javax.swing.JTable TableClients;
    private javax.swing.JButton btnModifier;
    private javax.swing.JButton btnSuppSelec;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField txtLogin;
    private javax.swing.JTextField txtPwd;
    // End of variables declaration//GEN-END:variables

    class ButtonsPanel extends JPanel {
    public final List<JButton> buttons = Arrays.asList(new JButton(new ImageIcon("C:\\Users\\HoussemEddine\\Documents\\NetBeansProjects\\TuniPharmaUchiwa\\src\\gui\\dlt.png")), new JButton("edit"));
    public ButtonsPanel() {
        super();
        setOpaque(true);
        
      //  try {
         //   Image img = ImageIO.read(getClass().getResource("/gui/delete.jpg"));
            for(JButton b: buttons) {
            b.setFocusable(false);
            b.setRolloverEnabled(false);
        //    b.setIcon(new ImageIcon(img));
  
            add(b);
        }
            
    //    } catch (IOException ex) {
    //        Logger.getLogger(Frame_Admin.class.getName()).log(Level.SEVERE, null, ex);
     //   }
        
    }
    }
    
class ButtonsEditor extends ButtonsPanel implements TableCellEditor {
    transient protected ChangeEvent changeEvent = null;

    public ButtonsEditor(final JTable table) {
        super();
        //---->
        //DEBUG: view button click -> control key down + edit button(same cell) press -> remain selection color
        MouseListener ml = new MouseAdapter() {
            @Override public void mousePressed(MouseEvent e) {
                ButtonModel m = ((JButton)e.getSource()).getModel();
                if(m.isPressed() && table.isRowSelected(table.getEditingRow()) && e.isControlDown()) {
                    setBackground(table.getBackground());
                }
            }
        };
        buttons.get(0).addMouseListener(ml);
        buttons.get(1).addMouseListener(ml);
        //<----

        buttons.get(0).addActionListener(new ActionListener() {
            @Override public void actionPerformed(ActionEvent e) {
                int row = table.convertRowIndexToModel(table.getEditingRow());
                Object o = table.getModel().getValueAt(row, 0);
                fireEditingStopped();
                new dao.ClientsDAO().deleteClient((int)o);
                TableClients.setModel(new Table_Clients());
                TableColumn column = TableClients.getColumnModel().getColumn(9);
                column.setCellRenderer(new ButtonsRenderer());
                column.setCellEditor(new ButtonsEditor(TableClients));
                TableColumn col = TableClients.getColumnModel().getColumn(0);
                col.setMinWidth(0);
                col.setMaxWidth(0);
                col.setWidth(0);
                col.setPreferredWidth(0);
                doLayout();
            }
        });

        buttons.get(1).addActionListener(new ActionListener() {
            @Override public void actionPerformed(ActionEvent e) {
                //Object o = table.getModel().getValueAt(table.getSelectedRow(), 0);
                int row = table.convertRowIndexToModel(table.getEditingRow());
                Object o = table.getModel().getValueAt(row, 0);
                fireEditingStopped();
                JOptionPane.showMessageDialog(table, "Editing: "+o);
            }
        });

        addMouseListener(new MouseAdapter() {
            @Override public void mousePressed(MouseEvent e) {
                fireEditingStopped();
            }
        });
    }
    @Override public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
        this.setBackground(table.getSelectionBackground());
        return this;
    }
    @Override public Object getCellEditorValue() {
        return "";
    }

    //Copid from AbstractCellEditor
    //protected EventListenerList listenerList = new EventListenerList();
    //transient protected ChangeEvent changeEvent = null;
    @Override public boolean isCellEditable(EventObject e) {
        return true;
    }
    @Override public boolean shouldSelectCell(EventObject anEvent) {
        return true;
    }
    @Override public boolean stopCellEditing() {
        fireEditingStopped();
        return true;
    }
    @Override public void cancelCellEditing() {
        fireEditingCanceled();
    }
    @Override public void addCellEditorListener(CellEditorListener l) {
        listenerList.add(CellEditorListener.class, l);
    }
    @Override public void removeCellEditorListener(CellEditorListener l) {
        listenerList.remove(CellEditorListener.class, l);
    }
    public CellEditorListener[] getCellEditorListeners() {
        return listenerList.getListeners(CellEditorListener.class);
    }
    protected void fireEditingStopped() {
        // Guaranteed to return a non-null array
        Object[] listeners = listenerList.getListenerList();
        // Process the listeners last to first, notifying
        // those that are interested in this event
        for(int i = listeners.length-2; i>=0; i-=2) {
            if(listeners[i]==CellEditorListener.class) {
                // Lazily create the event:
                if(changeEvent == null) {
                    changeEvent = new ChangeEvent(this);
                }
                ((CellEditorListener)listeners[i+1]).editingStopped(changeEvent);
            }
        }
    }
    
    protected void fireEditingCanceled() {
        // Guaranteed to return a non-null array
        Object[] listeners = listenerList.getListenerList();
        // Process the listeners last to first, notifying
        // those that are interested in this event
        for(int i = listeners.length-2; i>=0; i-=2) {
            if(listeners[i]==CellEditorListener.class) {
                // Lazily create the event:
                if(changeEvent == null) {
                    changeEvent = new ChangeEvent(this);
                }
                ((CellEditorListener)listeners[i+1]).editingCanceled(changeEvent);
            }
        }
    }
    }
class ButtonsRenderer extends ButtonsPanel implements TableCellRenderer {
    public ButtonsRenderer() {
        super();
        setName("Table.cellRenderer");
    }
    @Override public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
        this.setBackground(isSelected?table.getSelectionBackground():table.getBackground());
        return this;
    }
}


}

